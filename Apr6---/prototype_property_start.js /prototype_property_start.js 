'use strict';

// TODO: Extract instructions into new Activity README.md format.

/******************************************************************************
 *
 * This exercise will introduce you to one of the most powerful contexts
 *   for prototypes in JavaScripts: object-oriented programming (OOP) With
 *   constructor functions.
 *
 *   There's a lot of text in this file, but don't let that intimidate you.
 *   It's all there to help--you won't be doing as much work as it looks.
 *
 *****************************************************************************/


/*****************************************************************************
 *
 * BACKGROUND/INSTRUCTIONS:: The Prototype of Instance Objects
 *
 ******************************************************************************
 * A function's length property stores how many arguments
 *   the author defined the function with. The point you need to remember,
 *   though, is this: In JavaScript, any entity with properties is an Object.
 *
 *   Yes...Even functions. Try this:
 *
 *   1. Explain to your partner what the 'call' function does.
 *
 *   2. Explain to your partner what the arguments to call mean.
 *
 *   3. Use call to create a new user, named Mary Wollstonecraft,
 *        with any email. What do you have to create before usinpu ="" call?
 *
 *   4. Log your user's first name.
 ***********************************************************************/
function User(first_name, last_name, email){
	this.first_name = first_name;
	this.last_name = last_name;
	this.email = email;
}

var mary = new User("Mary", "Wollstonecraft", "mary@someone.com" );

console.log(mary.first_name);

var mary2 = {};
User.call(mary2, "Mary2", "Wollstonecraft", "mary@someone.com");

console.log(mary2);
// var mary3 = new User("Mary3", "Wollstonecraft", "mary@someone.com");
// console.log(mary3.first_name);
/*****************************************************************************
 *
 * BACKGROUND/INSTRUCTIONS:: The Prototype of Instance Objects
 *
 ******************************************************************************
 *
 * This isn't as good as just using User--fair enough. But, it demonstrates
 *   one of the most important characteristics of OOP JavaScript.
 *
 *   Take a look at your definition for User. Now, take a look at how you just
 *   instantiated a new user. Explain to your partner, in technical terms, what
 *   User.call is.
 *
 *   ...A property access-right? User is a function; a function is an object;
 *   objects have properties; User.call(...) means, get the call property on
 *   User, and call it as a function.
 *
 *   Thing is, User doesn't have a call method. But, User is an object. And
 *   objects have prototypes. Which means...JavaScript looks for call on User's
 *   prototype chain.
 *
 *   Since our function call worked, we can assume it found it.
 *
 *   Working with a partner, draw a diagram of this prototype chain.
 *
 *   0. First, use the constructor to set mwollstonecraft equal to a new object
 *      with the same parameters. This allows us to say consistent with how we
 *      create users in this activity.:w
 *
 *   1. Use P(User), or your own notation, to denote the prototype of User.
 *
 *   2. Be sure you can explain what happens when we call User.call. Attach
 *      it as a property in the right place.
 ******************************************************************************/

//Write your code here.Draw your diagrom on a piece of paper.



/******************************************************************************
 *
 * One possible solution is below.
 *
 _____________________________________________________________________________
 |                                                                            |
 |        Object.getPrototypeOf(User)                                         |
 |   User --------------------------> P(User)                                 |
 |                                |_call                                      |
 |____________________________________________________________________________|
 *****************************************************************************/

/*****************************************************************************
 *
 * BACKGROUND: The Prototype of Instance Objects
 *
 ******************************************************************************
 *
 * This exercise will introduce you to one of the most powerful contexts
 *   for prototypes in JavaScripts: object-oriented programming (OOP) With
 *   constructor functions.
 *
 * Okay--so func*tions are objects. Like all objects, they have prototypes.
 *   Again, this is absolutely crucial JavaScript. But there's one more piece
 *   of information essential for using it for OOP.
 *
 *   By now, you'll never forget that all objects have prototypes! But we
 *   haven't covered where the prototype object itself comes from. There's
 *   a simple answer for objects created with constructor functions.
 *
 *   Every constructor function has a special property, called prototype,
 *   which is an object. The crucial point is this:
 *
 *     The prototype for every object you create with a constructor function
 *     is the object referenced by the prototype property of the constructor.
 *
 *   That's a bit of a mouthful, and we realize that the word "prototype"
 *   can regfer to a confusing number of things. This mostly won't matter
 *   in practice, but there is one easy mistake to make. Keep in mind that:
 *
 *     Object.getPrototypeOf(User) IS NOT THE SAME AS User.prototype.
 *
 *   These are totally different objects. The first is the prototype that User
 *   delegates to. The second is an object we attach to User for convenience,
 *   so that it's easy to set up the prototype chains for objects you create
 *   with it.
 *
 *   This can be a bit confusing, so feel free to experiment with it.
 *
 *
 ******************************************************************************
 *
 * INSTRUCTIONS
 *
 ******************************************************************************
 *   FIrst, explain to your partner what the prototype of mwollstonecraft is.
 *   Then, store it in a variable.
 *
 ******************************************************************************
 *
 *
 * This exercise will introduce you to one of the most powerful contexts
 *   for prototypes in JavaScripts: object-oriented programming (OOP) With
 *   constructor functions.
 *
 * Okay--so func*tions are objects. Like all objects, they have prototypes.
 *   Again, this is absolutely crucial JavaScript. But there's one more piece
 *   of information essential for using it for OOP.
 *
 *   By now, you'll never forget that all objects have prototypes! But we
 *   haven't covered where the prototype object itself comes from. There's
 *   a simple answer for objects created with constructor functions.
 *
 *   Every constructor function has a special property, called prototype,
 *   which is an object. The crucial point is this:
 *
 *     The prototype for every object you create with a constructor function
 *     is the object referenced by the prototype property of the constructor.
 *
 *   That's a bit of a mouthful, and we realize that the word "prototype"
 *   can regfer to a confusing number of things. This mostly won't matter
 *   in practice, but there is one easy mistake to make. Keep in mind that:
 *
 *     Object.getPrototypeOf(User) IS NOT THE SAME AS User.prototype.
 *
 *   These are totally different objects. The first is the prototype that User
 *   delegates to. The second is an object we attach to User for convenience,
 *   so that it's easy to set up the prototype chains for objects you create
 *   with it.
 *
 *   Phew...That was a whirlwind. Let's put all that theory to good use.
 *
 *
 ******************************************************************************
 *
 * INSTRUCTIONS
 *
 ******************************************************************************
 *
 *   FIrst, explain to your partner what the prototype of mwollstonecraft is.
 *   Then, store it in a variable.
 *
 *****************************************************************************/

//Write your code here.

/******************************************************************************
 *
 * INSTRUCTIONS
 *
 ******************************************************************************
 *
 * Powerful stuff!
 *
 * You have one more task before you complete this activity. This is the most
 * important practical technique you'll learn in this activity, so be sure you
 * understand it well enough to explain it.
 *
 *   1. First, create a new user. Name them whatever you want.
 *
 *   2. Define a function called is_admin. It should check if a user has an
 *      admint property. if so, it returns the value of the property. Otherwise,
 *      it returns false. Use the this keyword, and feel free to write a
 *      function that does something more creative, if you want!
 *
 *   3. Where do you put this method such that both rheinlein and your new user
 *      can use it? Explain to your partner, and set things up properly.
 *
 *      Next, call your method on your user objects to demonstrate!
 *
 *   4. FIRST BONUS: scrutinize the fact that you can call this function
 *      from two different objects. Does this mean there are two copies of the
 *      method floating around? Explain to your partner how many copies there
 *      are, and justify your answer.
 *
 *  5. SECOND BONUS: Repeat what you did early in this activity with User.call
 *     to create yet another user to play with. Check if this object's
 *     prototype is equal to User.prototype. Explain your results, in detail,
 *     to your partner.
 *
 *****************************************************************************/

//Write your code here.

/******************************************************************************
 *
 * INSTRUCTIONS
 *
 ******************************************************************************
 *
 * ...Well, that was the last mandatry task, anyway. If you finish early, try
 *   to solve this one, inspired by an exercise in Stoyan Stefanov's book on
 *   OOP.
 *
 * 1. Create a Shape constructor. It should have a property called type. Attach
 *    a function, called get_type, such that any Shape will be able to call it.
 *    Just fill it in with a return statement for now.
 *
 * 2. Create Triangle and Square constructors. The triangles should set the
 *    properties side1, side2, and side3 for its side lengths.
 *    Do the same for Square.
 *
 * 3. Set the prototype of both of these objects equal to a new Shape().
 *    Try to explain to your prtner why we have to use an instance, rather than
 *    Shape directly, If it doesn't make sense, move on--we'll cover this in
 *    detail later.
 *
 * 4. Turn your attention to Shape.get_type. This function should return
 *    the type of the shape that it's called on--but only be defined on Shape.
 *
 *    To do this, read about the Object.prototype.constructor property on MDN:
 *
 *     http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor
 *
 *    JavaScript sets a constructor property for you automatically. But, when
 *    you muck with the prototype chain, this default won't accurately
 *    represent which function created which object.
 *
 *
 *    We learned about a new property of functions early in this activity,
 *    which should be helpful in solving this exercise. Return it from
 *    get_type.
 *
 *    Now, console.log the result of calling get_type. What do you get? What
 *    should you have gotten? Try to explain to your partner why this happened.
 *
 *    There is no "secret" to fixing this, actually. You really do just reset
 *    the .constructor property of the triangles you create. But, there's a
 *    nuance to it.
 *
 *      1. If you want all triangles ever created to report Triangle as their
 *         .constructor, where do you put that property?
 *      2. If your code still doesn't work, take a close look at where you're
 *         modifying your shape prototypes. Does the order in which you change
 *         the prototype and constructor properties matter?
 *
 * 5. Create a Pentagon object, analogous to your other shapes. Your getType
 *    method should work out of the box.
 *
 *****************************************************************************/

//Write your code here.